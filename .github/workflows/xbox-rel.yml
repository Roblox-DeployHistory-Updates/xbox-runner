name: Roblox XVC Fetch and Release
permissions: write-all

on:
  schedule:
    - cron: "0 * * * *"
  workflow_dispatch:
  push:

jobs:
  fetch-and-release:
    runs-on: ubuntu-latest
    outputs:
      new_release_created: ${{ steps.release_check.outputs.created }}

    env:
      PRODUCT_ID: BQ1TN1T79V9K

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download product.json
        run: |
          PRODUCT_URL="https://displaycatalog.mp.microsoft.com/v7.0/products?bigIds=${PRODUCT_ID}&market=US&languages=en-US,neutral&MS-CV=DGU1mcuYo0WMMp+F.1"
          echo "PRODUCT_URL=$PRODUCT_URL" >> $GITHUB_ENV
          curl -sSL "$PRODUCT_URL" -o product.json
          cat product.json

      - name: Extract info
        id: extract
        run: |
          contentId=$(jq -r '.Products[0].DisplaySkuAvailabilities[0].Sku.Properties.Packages[0].ContentId' product.json)
          lastUpdateDate=$(jq -r '.Products[0].DisplaySkuAvailabilities[0].Sku.Properties.LastUpdateDate' product.json)
          echo "contentId=$contentId" >> "$GITHUB_OUTPUT"
          echo "lastUpdateDate=$lastUpdateDate" >> "$GITHUB_OUTPUT"

      - name: Get latest release LastUpdateDate
        id: get_latest
        continue-on-error: true
        run: |
          latest_json=$(curl -sSL \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/releases/latest)

          desc=$(echo "$latest_json" | jq -r '.body // ""')
          if echo "$desc" | grep -q 'LastUpdateDate:'; then
            latest_lud=$(echo "$desc" | grep -o 'LastUpdateDate: .*' | cut -d' ' -f2)
            echo "latest_last_update=$latest_lud" >> "$GITHUB_OUTPUT"
          else
            echo "latest_last_update=none" >> "$GITHUB_OUTPUT"
          fi

      - name: Get download URL from msixvcdl-expressjs
        id: apicall
        if: steps.extract.outputs.lastUpdateDate != steps.get_latest.outputs.latest_last_update
        env:
          POST_KEY: ${{ secrets.SECRET_POST_TOKEN }}
        run: |
          msixvc_req=$(curl -sSL -X GET "https://msixvc.yakov.cloud/msixvc/$PRODUCT_ID" -H "Authorization: Bearer $POST_KEY")
          xvc_url=$(echo "$msixvc_req" | jq -r '.files[0].url')
          if [ -z "$xvc_url" ]; then
            echo "Error: No XVC URL found"
            exit 1
          fi
          echo "xvc_url=$xvc_url" >> "$GITHUB_OUTPUT"
          filename=$(basename "$xvc_url")
          echo "filename=$filename" >> "$GITHUB_OUTPUT"
          appVersion=$(echo "$msixvc_req" | jq -r '.files[0].fileName' | grep -oE '[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+')
          echo "appVersion=$appVersion" >> "$GITHUB_OUTPUT"

      - name: Check if tag already exists
        id: tagcheck
        if: steps.extract.outputs.lastUpdateDate != steps.get_latest.outputs.latest_last_update
        run: |
          if git ls-remote --tags origin | grep -q "refs/tags/${{ steps.apicall.outputs.filename }}$"; then
            echo "tag_exists=true" >> "$GITHUB_OUTPUT"
          else
            echo "tag_exists=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Download .xvc file
        if: steps.extract.outputs.lastUpdateDate != steps.get_latest.outputs.latest_last_update && steps.tagcheck.outputs.tag_exists == 'false'
        run: |
          curl -sSL "${{ steps.apicall.outputs.xvc_url }}" -o "${{ steps.apicall.outputs.filename }}.xvc"

      - name: Upload release using ncipollo/release-action
        if: steps.extract.outputs.lastUpdateDate != steps.get_latest.outputs.latest_last_update && steps.tagcheck.outputs.tag_exists == 'false'
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.apicall.outputs.filename }}
          name: ${{ steps.apicall.outputs.filename }}
          body: |
            ${{ steps.apicall.outputs.filename }}

            LastUpdateDate: ${{ steps.extract.outputs.lastUpdateDate }}
          artifacts: |
            product.json
            ${{ steps.apicall.outputs.filename }}.xvc

      - name: Archive product and XVC URL to Wayback Machine
        if: steps.extract.outputs.lastUpdateDate != steps.get_latest.outputs.latest_last_update && steps.tagcheck.outputs.tag_exists == 'false'
        run: |
          curl -s -X POST \
            -H "Accept: application/json" \
            -H "Authorization: LOW ${{ secrets.ARCHIVE_ORG_ACCESS_KEY }}:${{ secrets.ARCHIVE_ORG_SECRET_KEY }}" \
            --data-urlencode "url=$PRODUCT_URL" \
            -d "capture_outlinks=1" \
            https://web.archive.org/save

          curl -s -X POST \
            -H "Accept: application/json" \
            -H "Authorization: LOW ${{ secrets.ARCHIVE_ORG_ACCESS_KEY }}:${{ secrets.ARCHIVE_ORG_SECRET_KEY }}" \
            --data-urlencode "url=${{ steps.apicall.outputs.xvc_url }}" \
            https://web.archive.org/save

      - name: Append to Google Sheets
        id: 'update_worksheet'
        uses: jroehl/gsheet.action@v2.1.1
        if: steps.extract.outputs.lastUpdateDate != steps.get_latest.outputs.latest_last_update && steps.tagcheck.outputs.tag_exists == 'false'
        with:
          spreadsheetId: 1QB6SexYxoWUr2LUEaZJcmMf6eBOFAb3sozSWXSvHU5U
          commands: |
            [
              {
                "command": "appendData",
                "args": {
                  "worksheetTitle": "Roblox",
                  "valueInputOption": "RAW",
                  "minCol": 1,
                  "data": [
                    [
                      "${{ steps.apicall.outputs.appVersion }}",
                      "",
                      "",
                      "",
                      "=HYPERLINK(\"${{ steps.apicall.outputs.xvc_url }}\",\"Download\")"
                    ]
                  ]
                }
              }
            ]
        env:
          GSHEET_CLIENT_EMAIL: ${{ secrets.GSHEET_CLIENT_EMAIL }}
          GSHEET_PRIVATE_KEY: ${{ secrets.GSHEET_PRIVATE_KEY }}

      - name: Set release output
        id: release_check
        if: steps.extract.outputs.lastUpdateDate != steps.get_latest.outputs.latest_last_update && steps.tagcheck.outputs.tag_exists == 'false'
        run: echo "new_release_created=true" >> "$GITHUB_OUTPUT"
